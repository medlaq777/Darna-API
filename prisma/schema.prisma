generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "./zod" 
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  password      String?
  name          String?
  role          String   @default("user")
  emailVerified Boolean  @default(false)
  twoFaEnabled  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  otps          Otp[]
  properties    Property[]
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Users     User?    @relation(fields: [usersId], references: [id])
  usersId   String?  @db.ObjectId
  code      String
  type      String
  expiresAt DateTime
  used      Boolean  @default(false)
}




model Media {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  thumbnail  String?      // optional thumbnail URL
  mimeType   String
  size       Int?
  uploadedAt DateTime @default(now())
  ownerId    String   @db.ObjectId
  property   Property? @relation("PropertyMedia", fields: [propertyId], references: [id])
  propertyId String?  @db.ObjectId
}

enum TransactionType {
  sale 
  rent_daily 
  rent_monthly 
  rent_long
}

enum PropertyStatus {
  Draft 
  Published
  Archived
}

model Property {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  ownerId        String    @db.ObjectId
  owner          User      @relation(fields: [ownerId], references: [id])
  title          String
  description    String?
  transaction    TransactionType   
  price          Float?
  pricePerDay    Float?
  availableFrom  DateTime?
  availableTo    DateTime?
  addressId      String?  @db.ObjectId @unique
  address        Address? @relation(name: "AddressToProperty", fields: [addressId], references: [id])
  surface        Float?
  rooms          Int?
  bedrooms       Int?
  bathrooms      Int?
  amenities      String[]  // e.g. ["wifi", "parking"]
  rules          String?
  energyRating   String?
  status         PropertyStatus    @default(Draft) // DRAFT | PUBLISHED | ARCHIVED
  slug           String    @unique
  medias         Media[]   @relation("PropertyMedia")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
model Address {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  street  String?
  city    String?
  postal  String?
  country String?
  lat     Float?
  lng     Float?
  property Property? @relation(name: "AddressToProperty")
} 
